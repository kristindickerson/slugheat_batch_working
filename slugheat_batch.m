%% 
%% Reset all generic program parameters

clc

% Ask the user for presence heat pulse or not
loop_choice = input(['Do you want to loop through par files with a' newline ...
    'single penetration or loop through pen files with a single' newline ...
    'set of parameters (loop pars / loop pens): '], 's');
switch loop_choice
    case 'loop pars'
        loop_pens = 0; 
        loop_pars = 1;
    case 'loop pens'
        loop_pens = 1; 
        loop_pars = 0;
end   

counter = 0;

if loop_pens
    
    % Ask the user for file type
    inputfolder_choice = input(['Please name the input folder where all', ...
        '.pen or .mat files for batch mode are located.', newline ...
        'This should be a subfolder within "/batch_inputs/": '], 's');
    % Specify the directory path
    folderPath = [pwd, '/batch_inputs/' inputfolder_choice];
    
    % Ask the user for file type
    filetype_choice = input('Are you using .pen or .mat files? (.pen/.mat): ', 's');
    % Ask the user for presence heat pulse or not
    HP_choice = input('Are you using a heat pulse? (pen/par/none): ', 's');
    
    fileList = dir(fullfile(folderPath, ['*' filetype_choice])); % Use *.* for all files, or '*.ext' for specific file types
    
    switch HP_choice
        case 'pen'
            PulseData = 1; % Use heat pulse decay reduction from penetation file.
        case 'par'
            PulseData = 2; % Use heat pulse decay reduction from parameters file.
        case 'none'
            PulseData = 0; % Use no heat pulse.
    end        
    
    % Initialize an empty table with 18 variables (columns)
    numCols=18;
    varNames = {'Cruise', 'Station', 'Pen', 'TrialNum', 'Iter', 'HP', 'BW', ...
                    'TotNumSens', 'IgnoredSens', 'SensorsNoTemp', 'SensorsNok', ...
                    'TiltPen', 'Therm Grad (degC/m)', 'Avk (W/m/degC)', 'HF (W/mdegC)', 'HF Unc(LR) (W/mdegC)','CTRShift (m)', 'Notes'} % Create variable names as Column1, Column2, etc.
    % Initialize an empty table with the specified variable names
    outputTable = array2table(zeros(0, numCols), 'VariableNames', varNames);

    % Loop through each file and apply your function
    for i = 1:length(fileList)
        % Skip '.' and '..' or any directory (optional)
        if fileList(i).isdir
            continue;
        end
    
        % Get the full path to the file
        filePath = fullfile(folderPath, fileList(i).name);
    
        change_pars = 0;
        par_file=[];

        % Call your function on this file
        [HFData, ErrData]=batchmode(filePath, PulseData,folderPath,change_pars,par_file, counter);
    
        % Example 1x18 string array
        rowData = HFData; % Replace with your actual data
    
        % Convert the 1x18 string array to a table row
        newRow = array2table(rowData, 'VariableNames', varNames);
    
        % Append the new row to the main table
        outputTable = [outputTable; newRow];
    
    end
    % Get the current date and time without spaces
    currentDateTime = datetime('now', 'Format', 'yyyy-MM-dd_HHmmss');
    % Convert it to a string
    currentDateTimeString = char(currentDateTime);
    % Specify the file name and path
    filename = [pwd '/outputs/outputData_batch_' currentDateTimeString '.xlsx'];
    % Write the table to the Excel file
    writetable(outputTable, filename);

    disp('Success! See outputs in folder "/outputs/"')
end

if loop_pars

    % Ask the user for file type
    inputfolder_choice = input(['Please name the input folder where all', ...
        '.pen or .mat files for batch mode are located.', newline ...
        'This should be a subfolder within "/batch_inputs/": '], 's');
    % Specify the directory path
    folderPath = [pwd, '/batch_inputs/' inputfolder_choice];
    
    % Ask the user for file type
    filetype_choice = input('Are you using .pen or .mat files? (.pen/.mat): ', 's');
    % Ask the user for presence heat pulse or not
    HP_choice = input('Are you using a heat pulse? (pen/par/none): ', 's');
    
    file_pen = dir(fullfile(folderPath, ['*' filetype_choice])); % Use *.* for all files, or '*.ext' for specific file types
    fileList = dir(fullfile(folderPath, '*par'));

    switch HP_choice
        case 'pen'
            PulseData = 1; % Use heat pulse decay reduction from penetation file.
        case 'par'
            PulseData = 2; % Use heat pulse decay reduction from parameters file.
        case 'none'
            PulseData = 0; % Use no heat pulse.
    end        
    
    % Initialize an empty table with 18 variables (columns)
    numCols=18;
    varNames = {'Cruise', 'Station', 'Pen', 'TrialNum', 'Iter', 'HP', 'BW', ...
                    'TotNumSens', 'IgnoredSens', 'SensorsNoTemp', 'SensorsNok', ...
                    'TiltPen', 'Therm Grad (degC/m)', 'Avk (W/m/degC)', 'HF (W/mdegC)', 'HF Unc(LR) (W/mdegC)','CTRShift (m)', 'Notes'}; % Create variable names as Column1, Column2, etc.
    % Initialize an empty table with the specified variable names
    outputTable = array2table(zeros(0, numCols), 'VariableNames', varNames);

    % Loop through each file and apply your function
    for i = 1:length(fileList)

        % Skip '.' and '..' or any directory (optional)
        if fileList(i).isdir
            continue;
        end
    
        % Get the full path to the file
        filePath = fullfile(folderPath, file_pen.name);
        par_file = fileList(i).name
    
        change_pars=1;
        counter=counter+1;

        % Call your function on this file
        [HFData, ErrData]=batchmode(filePath, PulseData,folderPath,change_pars,par_file, counter);
    
        % Example 1x18 string array
        rowData = HFData; % Replace with your actual data
    
        % Convert the 1x18 string array to a table row
        newRow = array2table(rowData, 'VariableNames', varNames);
    
        % Append the new row to the main table
        outputTable = [outputTable; newRow];
    
    end
    % Get the current date and time without spaces
    currentDateTime = datetime('now', 'Format', 'yyyy-MM-dd_HHmmss');
    % Convert it to a string
    currentDateTimeString = char(currentDateTime);
    % Specify the file name and path
    filename = [pwd '/outputs/outputData_batch_' currentDateTimeString '.xlsx'];
    % Write the table to the Excel file
    writetable(outputTable, filename);

    disp('Success! See outputs in folder "/outputs/"')
end
%%
function [HFData, ErrData]=batchmode(filePath, PulseData,folderPath,change_pars,par_file, counter)

isBatchMode = 1;
figure_Main=[];
S_MATFile=[];

 %% Variables created in the main app (SlugHeat.mlapp)
 %% ==================================================

        % Plots are all turned ON to start
        % --------------------------------
        BWPlot = 1;
        DepthPlot = 1;
        TiltPlot = 1;
        TempPlot = 1;

        TempTimePlot = 1;
        TempTauPlot = 1;
        TempBullFuncPlot = 1;
        MisfitShiftPlot = 1;

        BullTempvDepthPlot = 1;
        TCvDepthPlot = 1;
        TempvCTRPlot = 1;

        HFPlot = 1;
        SigmaPlot = 1;

        UseWaterSensor = 1;
        UseHP = 1;

        % Initialize general processing parameters
        % ----------------------------------------
        NoInitialize = 0;
        Reprocess = 0;
        RunAnalysis = 0;

        Badk = [];
        BadT = [];
        
        % Record numbers for penetration, heat pulse, and end 
        % are unchanged to start
        % -----------------------------------------------------
        PenStartChanged=0;
        HeatPulseChanged=0;
        PenEndChanged=0;

        % Begin at Trial 0
        % -----------------
        Trial = 0;

        % Turn pause and convergence off
        % ------------------------------
        Pause = 0;
        Converged = 0;
        
        % Colors
        % ----------
        LightGrey = [0.97 0.97 0.97];
        
        % Save original number of sensors before discarding from dataset
        % ----------------------------------------------------------------
        OrigNumberOfSensors = 0;

        % For results
        % -----------
        %HFData     = [];       % Heat Flow Results Summary data
        ErrData    = [];       % Error and Uncertatinty results summary data
        S_FricResults     = [];% Structure for all frictional decay reduction results
        S_HPResults     = [];  % Structure for all heat pulse decay reduction results
        S_HeatFlowResults = [];% Structure for all heat flow reduction results
        S_Results       = [];  % All results
        S_SensResults = [];    % Sensitivity results
       
        
        BWChosen = 0;         % If the user has already chosen a bottom water, don't ask them again
        BottomWaterValue = 0; % Value of bottom water if it's manually chosen by user
        NumSensAnalyses = 0;  % number of sensitivity analyses that have been run for this penetration

        Bins = 25;


% ------------------------------------
SensorsToUse = 17;
Trial = 0;
Reprocess = 0;
UseWaterSensor = 1;
WaterThermistor = 1;
UseHP = 1;
IgnoredSensors = [];
%% Initialize

%% =====================================================================
%% Automatically runs when running program. Initializes program and 
%% loads default parameters from .par file
%% =====================================================================

%% Initialize GUI 

%% Initialize program
        [Version, Update, ...
		NumberOfColumns, ...
		CurrentPath, CurrentDateTime, ...
        ParFile, ParFilePath, ParFileName, ...
        DefaultParFile, ...
    	ProgramLogId,...
        AppPath, ...
        AppOutputs] =  InitializeProgram(isBatchMode);

%% DIALOG BOX: Stop and inform user if they are in the wrong directory
        while ~exist(fullfile(CurrentPath, 'ReadParFile.m'), 'file')
            disp(['ERROR: You are in the wrong directory. ...' ...
                'Please be sure your current path holds all of the necessary files'])
            return
        end


%% Read .par file

if ~change_pars
    % Grab .par file in the parent folder
    ParFiles = dir(fullfile(folderPath, '*.par'));

    if length(ParFiles)==1
        ParFileName = ParFiles(1).name;
        ParFile = fullfile(folderPath, ParFileName);
    else
        disp(['Error: You must have only 1 .par file in the parent folder. ' ...
            'Place only the .par file you want to use to define your parameters in the folder: ' folderPath])
    end 
else
    ParFileName = par_file;
    ParFile = fullfile(folderPath, ParFileName);
end

%% Read in parameters from parameters file
        [S_ParFile, ...
        NumberOfSensors, ...	
        WaterThermistor, ...
        TimeScalingFactor, ...
        DeltaTime, ...
        SensorRadius, ...
        SensorDistance, ...
        TempError, ...
        CalibrationCoeffs, ...
        HyndmanCoeffs, ...
        FrictionalDelays, ...
        FricMaxStep, ...
        TimeInc, ...
        FricTauMin, ...
        FricTauMax, ...
        PulseDelays, ...
        kInit, ...
        ktype, ...
        PulsePowerPARFile, ...
        TimeShiftInit, ...
        TimeShiftInc, ...
        PulseMaxStep, ...
        kTolerance, ...
        PulseTauMin, ...
        PulseTauMax, ...
        HeatPulseLength, ...
        MinTotalkChange, ...
        MaxNumberOfIterations, ...
        MaxSAIterations, ...
        Sigmak0, ...
        kMin, ...
        kMax, ...
        MinThickness, ...
        kAnisotropy, ...
        TopSensorDepth, ...
        ProbeLength,...
        Offset] = ReadParFile(ParFile, ProgramLogId, ParFileName, CurrentPath);

        % Save original paramaters from PAR file in structure
        % ---------------------------------------------------
       % FrictionalDelays = repmat(FrictionalDelays(1), Nu)
        OrigParams = S_ParFile;
%% Get data


           % Get the penetration and tap file, create log file and 
           % results file
           % -------------------------------------------------------
		    [PenFileName, ...
               PenFilePath, ...
               PenFile, ...
		        TAPName, ...
               TAPFileName, ...
               TAPFile, ...
               MATFileName, ...
               MATFile, ...
		        LogFileName, ...
               LogFile, ...
		        ResFileName, ...
               ResFile, ...
               LogFileId, ...
               ResFileId...
               ] = GetFiles(...
		        CurrentPath, ...
               ProgramLogId, ...
               figure_Main, ...
               AppPath, isBatchMode, filePath, counter);

            % if there is no .res file created yet, stop
            if isempty(ResFileId) 
                return
            end
    
            % if there is no .pen file chosen, stop
            if PenFile==0
                return
            end

             if ~isfile(MATFile) 
            
                % Read in data from penetration TEXT file
                % -------------------------------------------------
            
                [StationName, ...
                Penetration, ...
                CruiseName, ...
                Datum, ...
                Latitude, ...
                Longitude, ...
                DepthMean, ...
                TiltMean, ...
                LoggerId, ...
                ProbeId, ...
                NumberOfSensors, ...
                PenetrationRecord, ...
                HeatPulseRecord, ...
                EndRecord, ...
                AllRecords, ...
                AllSensorsRawData, ...
                WaterSensorRawData, ...
                CalibTemps, ...
                MeanCalibTemps, ...
                WaterThermistor,...
                PulsePower] = ReadPenText_withPulse(PenFile, figure_Main, ...
                WaterThermistor, figure_Main);
            
                % Read in information from tap TEXT file
                % -------------------------------------------------
                [TAPRecord, ...
                Tilt, ...
                Depth ...
                ] = ReadTAPText(...
                LogFileId, ...
                ProgramLogId, ...
                TAPName, ...
                SensorDistance, ...
                DepthMean, ...
                TiltMean, ...
                PenFilePath);
            
            %% Get data using the .mat file
            
            else
            
                % Read in data from penetration .mat file
                % -------------------------------------------------
            
                [S_MATFile, FullExpeditionName, ...
                StationName, ...
                Penetration, ...
                CruiseName, ...
                Datum, ...
                Latitude, ...
                Longitude, ...
                DepthMean, ...
                TiltMean, ...
                LoggerId, ...
                ProbeId, ...
                NumberOfSensors, ...
                NumberOfSensorsWorking,...
                PenetrationRecord, ...
                HeatPulseRecord, ...
                EndRecord, ...
                AllRecords, ...
                AllSensorsRawData, ...
                WaterSensorRawData, ...
                MeanCalibTemps, ...
                PulsePower ...
                ] = ReadPenFile_withPulse(MATFile, LogFileId, ...
                PenFile, ProgramLogId, figure_Main);
            
                % Reformat FrictionalDelays to be same size as number of
                % thermistors
                FrictionalDelays=repmat(FrictionalDelays(1), NumberOfSensors);
                PulseDelays=repmat(PulseDelays(1), NumberOfSensors);

                % Read in temperature and pressure (depth) data from .mat file
                % ------------------------------------------------------------
                if isfield(S_MATFile, 'S_TAPVAR')
                    [TAPRecord, ...
                      Tilt, Depth, SensorDistance ...
                      ] = ReadTAPFile(S_MATFile, SensorDistance);
                else
                    TAPRecord = [];
                    Tilt = [];
                    Depth = [];
                end 
             end


%% Convert pulse power in W/m to power in J/m based on probe


            % length, rounded to nearest integer
            % -------------------------------------------------------
           % PulsePower  = round(PulsePower);
            %PulsePower  = PulsePower/ProbeLength;
            if PulsePower <= 0
                PulsePower = PulsePowerPARFile;
                disp(['You are using the pulse power from the .par file: ' num2str(PulsePower) 'J/m'])
            elseif PulseData == 2
                PulsePower = PulsePowerPARFile;
                disp(['You are using the pulse power from the .par file: ' num2str(PulsePower) 'J/m'])
            elseif PulseData == 1
                 disp(['You are using the pulse power from the .pen or .mat file: ' num2str(PulsePower) 'J/m'])
            end

%% Confirm working sensors to use



            % Set sensors to use to all sensors originally
            % ---------------------------------------------
            SensorsToUse = 1:NumberOfSensors;
    
            % If no water thermistor found (data is NaN), ignore it and set
            % WaterThermistor to 0
            % -------------------------------------------------------------
            if all(isnan(WaterSensorRawData))
                WaterSensorRawData = AllSensorsRawData(:, ...
                    SensorsToUse(end));
                WaterThermistor = 0;
            end
            BWChosen = 0; 
%% Correct temperatures by calibrating sensors


    % This is done by calibrating the sensors with temperatures 
    % measured during the calibration period defined by the user during 
    % penetration set up and making of the .pen and .mat files in SlugPen.   

           % Convert penetration file raw data to corrected temperature
           % -------------------------------------------------------------
            app=[];
           [...
            BottomWaterTemp, ...
            WaterSensorTemp, ...
            AllSensorsTemp, ...
            AllSensorsCalibratedTemp,...
            WaterThermistor] = TempCorrection(...
             BWChosen, ...
             BottomWaterValue,...
             AllSensorsRawData, ...
             WaterThermistor, ...
             WaterSensorRawData, ...
             Offset, ...
             PenetrationRecord, ...
             AllRecords, ...
             MeanCalibTemps, ...
             NumberOfSensors, ...
             SensorsToUse, ...
             figure_Main, ...
             app);

           % Set bottom water label on GUI, now that it has been determined
            % -------------------------------------------------------
            edit_bottomwater.Value = BottomWaterTemp;

%% Split penetration data

%% Split penetration and heat pulse data

            [FricTime, ...
            FricTemp, ...
            PulseData, ...
            PulseTime, ...
            PulseTemp ...
            ] = SplitDecays( ...
            PenetrationRecord, ...
            HeatPulseRecord, ...
            EndRecord, ...   
            AllRecords, ...
            TimeScalingFactor, ...
            AllSensorsTemp, LogFileId,PenStartChanged, ...
            HeatPulseChanged, PenEndChanged, ProgramLogId, ...
            NumberOfColumns, PulseData);

%% Print header for .res file


            % ---------------------------
            PrintHeaderResults(Version, ...
                Update, ...
	        	NumberOfColumns, ...
                CurrentDateTime, ...
                ParFile,...
                ProgramLogId, ...
                LogFileId, ...
                LogFile, ...
                ResFileId, ...
                ResFile, ...
                PenFile, ...
                SensorDistance, ...
                Tilt, ...
                TAPName, ...
                TAPFileName)
%% Initialize processing (like if you hit the process button in the GUI)

% If there is no penetration selected, stop
        % ------------------------------------------
        if ~exist(PenFile, 'file')
                disp('Must select a penetration')
                return
        else
                if PulseData && PulsePower==0
                 disp(['You are using heat pulse reduction, but the recorded heat pulse power is 0 ' ...
                     'Either ignore heat pulse reduction or change pulse power.'])
                return
                end

%% Update all general parameters before processing begins

            % Update trial
            % -------------
            Trial=Trial+1;

% Update record numbers for frictional decay and heat pulse 
            % decay in case manually changed by user
            % ---------------------------------------------------
            [FricTime, ...
            FricTemp, ...
            PulseData, ...
            PulseTime, ...
            PulseTemp ...
            ] = SplitDecays( ...
            PenetrationRecord, ...
            HeatPulseRecord, ...
            EndRecord, ...   
            AllRecords, ...
            TimeScalingFactor, ...
            AllSensorsTemp, LogFileId, PenStartChanged, ...
            HeatPulseChanged, PenEndChanged, ProgramLogId, ...
            NumberOfColumns, PulseData);

% In case iterations were paused before, update so that
            % convergence has not been met
            Converged = 0;
            Pause=0; % no iterations

            if PulseData
                HPStatus='Used';
            else
                HPStatus='Not Used';
            end

% Set bottom water temperature for all sensors, 
            % if not already
            % -----------------------------------------------
            if length(BottomWaterTemp)==1
                BottomWaterTemp = repmat(BottomWaterTemp, 1, ...
                    NumberOfSensors);
            end            

MethodChoice = 'Iterate';
            
            switch MethodChoice
                case 'Iterate'
            
                    % If it is the first trial or there is no heat pulse 
                    % or this is a reprocessing, continue
                    if Trial == 1 || (Trial > 0 && ~PulseData) ...
                        || Reprocess

%% INITIALIZE main loop for processing via ITERATIVE method

                        [A, ...
                        B, ...
                        C, ...
                        D, ...
                        E, ...
                        F, ...
                        kFunction, ...
                        Currentk, ...
                        CurrentT, ...
                        TChange, ...
                        kChange, ...
                        Iteration, ...
                        kInitial, ...
                        FirstIteration, ...
                        TotalIterations, ...
                        AnotherTrial, ...
                        Trial, ...
                        RelativeDepths ...
                        ] = InitializeProcessing(NumberOfSensors, ...
                        SensorDistance, ...
                        TopSensorDepth, ...
                        kInit, ktype, Trial);
            
                    end

%% BEGIN main loop for processing via ITERATIVE method
           
                    % Begin iterative part of the computations
                    % ----------------------------------------
                    if Trial == 1 || ~PulseData  || Reprocess 

                         % Determine iteration number
                        % --------------------------
                        if Trial > 1
                          Iteration = 1;
                        end

                        IterationCounter = 1;
                        ChosenIteration = MaxNumberOfIterations;

                         % ==============================================
                        %% This is the beginning MAIN LOOP for iterating!
                            % while convergence has NOT been met and
                            % when iteration number is LESS than the
                            % MAX iteration value set by the user, kee
                            % iterating
                        % ==============================================

                        while Iteration <= ChosenIteration && Converged==0 

                             % ========================================
                             %% Compute EQUILIBRIUM TMPERATURES after 
                             %% frictional heating decay from penetration
                             % ========================================

                             if (Trial == 1 || (Trial > 1 && kFunction))
                                loading=[];
                                ShiftedRelativeDepths=[];
                                  % Compute frictional decay function
                                % ---------------------------------
                                 [NumberOfFricUsedPoints, ...
                                         MinimumFricEqTemp, ...
                                         MinimumFricError, ...
                                         MinimumFricDelays, ...
                                         MinimumFricSlope, ...
                                         HPTooLow, ...
                                         FricShiftedTime, ...
                                         IndexOfMinimums, ...
                                         FricDataTemp, ...
                                         FricTimeShifts, ...
                                         ShiftedTau, ...
                                         DataFAT, ...
                                         FricDataLimits, ...
                                         b, ...
                                         a, ...
                                         RMS...
                                         ] = FrictionalDecay( ...
                                         figure_Main, ...
                                         FricTime, ...
                                         FricTemp, ...
                                         NumberOfSensors, ...
                                         FrictionalDelays, ...
                                         FricMaxStep, ...
                                         TimeInc, ...
                                         Currentk, ...
                                         HyndmanCoeffs, ...
                                         SensorRadius, ...
                                         FricTauMin, ...
                                         FricTauMax, ...
                                         SensorsToUse, ...
                                         loading, ...
                                         A, ...
                                         B, ...
                                         C, ...
                                         D, ...
                                         E, ...
                                         F,...
                                         ShiftedRelativeDepths,...
                                         RelativeDepths, PenFileName);

                                 % Structure of outputs from 
                                   % frictional decay
                                   % --------------------------
                                   S_FricResults = struct(...
                                      'NumberOfFricUsedPoints', NumberOfFricUsedPoints, ...
                                      'MinimumFricEqTemp', MinimumFricEqTemp, ...
                                      'MinimumFricError', MinimumFricError, ...
                                      'MinimumFricDelays', MinimumFricDelays, ...
                                      'MinimumFricSlope', MinimumFricSlope, ...
                                      'HPTooLow', HPTooLow, ...
                                      'FricShiftedTime', FricShiftedTime, ...
                                      'IndexOfMinimums', IndexOfMinimums, ...
                                      'FricDataTemp', FricDataTemp, ...
                                      'FricTimeShifts', FricTimeShifts, ...
                                      'ShiftedTau', ShiftedTau, ...
                                      'DataFAT', DataFAT, ...
                                      'FricDataLimits', FricDataLimits, ...
                                      'b', b, ...
                                      'a', a, ...
                                      'RMS', RMS);

                                 % If frictional decay reduction failed, 
                                 % stop program and return to penetration 
                                 % tab
                                 if HPTooLow 
                                     return
                                 end

                                 %% Define new equilibrium sediment 
                                 %% temperatures
                                 % ---------------------------------
                                  PreviousT = CurrentT;
                                  CurrentT = MinimumFricEqTemp';
                             end

                             % ========================================
                             %% Compute THERMAL CONDUCTIVITIES from heat
                             %% pulse decay, if there was a heat pulse
                             % ========================================
                             if PulseData 
                                 % Calculate in situ thermal conductivities 
                                 % iteratively from a heat pulse decay
                                 % ------------------------------------------
                                 [ ...
                                  MeankPointAtMinkDiff, ...
                                  kSlopeAtMinkDiff, ...
                                  MeankPointAtZeroInfTemp, ...
                                  MeankPointAtMinRMS, ...
                                  kSlopeAtZeroInfTemp, ...
                                  kSlopeAtMinRMS, ...
                                  TempAtInf, ...
                                  NumberOfUsedPoints, ...
                                  MinimumPulseDelays, ...
                                  kError, ...
                                  HeatPulseTime, ...
                                  MinkDiffIndex, ...
                                  ShiftedTime, ...
                                  DataTemp, ...
                                  TimeShifts, ...
                                  kSlopeRMS, ...
                                  TempAtInfinity, ...
                                  OneOverTime, ...
                                  kSlope, ...
                                  DataLimits] = HeatPulseDecay( ...
                                      figure_Main,...
                                      SensorsToUse, ...
                                      PulseTime, ...
                                      PulseDelays, ...
                                      MinimumFricEqTemp, ...
                                      MinimumFricSlope, ...
                                      PulseTemp, ...
                                      Currentk, ...
                                      HyndmanCoeffs, ...
                                      SensorRadius, ...	
                                      PulseMaxStep, ...
                                      TimeShiftInc, ...
                                      PulseTauMin, ...
                                      PulseTauMax, ...
                                      PulsePower, ...
                                      HeatPulseLength, ...
                                      NumberOfSensors);

                                 % Structure of outputs from heat pulse 
                                 % decay reduction
                                 % ------------------------------------
                                 S_HPResults = struct(...
                                  'MeankPointAtMinkDiff',    MeankPointAtMinkDiff, ...
                                  'kSlopeAtMinkDiff',        kSlopeAtMinkDiff, ...
                                  'MeankPointAtZeroInfTemp', MeankPointAtZeroInfTemp, ...
                                  'MeankPointAtMinRMS',      MeankPointAtMinRMS, ...
                                  'kSlopeAtZeroInfTemp',     kSlopeAtZeroInfTemp, ...
                                  'kSlopeAtMinRMS',          kSlopeAtMinRMS, ...
                                  'TempAtInf',               TempAtInf, ...
                                  'NumberOfUsedPoints',      NumberOfUsedPoints, ...
                                  'MinimumPulseDelays',      MinimumPulseDelays, ...
                                  'kError',                  kError, ...
                                  'HeatPulseTime',           HeatPulseTime, ...
                                  'MinkDiffIndex',           MinkDiffIndex, ...
                                  'ShiftedTime',             ShiftedTime, ...
                                  'DataTemp',                DataTemp, ...
                                  'TimeShifts',              TimeShifts, ...
                                  'kSlopeRMS',               kSlopeRMS, ...
                                  'TempAtInfinity',          TempAtInfinity, ...
                                  'OneOverTime',             OneOverTime, ...
                                  'kSlope',                  kSlope, ...
                                  'DataLimits',              DataLimits);

                                 % End function if failed during heat 
                                 % pulse reduction
                                 % ----------------------------------
                                 if isempty(MeankPointAtMinkDiff)
                                     return
                                 end

                                 % If convergence criteria has been met, user is alerted 
                                 % and the iterations will stop and results will be plotted 
                                 TotkChange = abs(sum(kChange(find(~isnan(kChange)))));
                                 if TotkChange < MinTotalkChange 
                                     disp('Convergence reached!')
                                     Converged = 1; 
                                 end

                                 % Define new conductivity
                                 Previousk = Currentk;
                                 Currentk  = MeankPointAtMinkDiff';
                             else 

                                 % =======================================
                                 %% Compute HEAT FLOW if there is NO heat 
                                 %% pulse used
                                 % =======================================
        
                                  [ ...
                                  SensorsUsedForBullardFit, ...
                                  GoodkIndex, ...
                                  CTRToUse, ... 
                                  CTR, ...
                                  ShiftedCTR, ...
                                  ShiftedRelativeDepths, ...
                                  TToUse, ...
                                  kToUse, ...
                                  PenetrationLag, ...
                                  Slope, ...
                                  Shift, ...
                                  HeatFlow, HFErr, ...
                                  HFShift, HFShiftErr, ...
                                  Averagek, kErr, ...
                                  Gradient, GradErr, ...
                                  GradShift, GradShiftErr] = ...
                                  HeatFlowAnalysis(NumberOfSensors, ...
                                  RelativeDepths, ...
                                  Currentk, ...
                                  MinimumFricEqTemp, ...
                                  Badk, ...
                                  BadT, ...
                                  SensorsToUse);

                                   %% Structure for outputs of heat flow analysis
                                  S_HeatFlowResults = struct(...
                                      'SensorsUsedForBullardFit', SensorsUsedForBullardFit, ...
                                      'GoodkIndex', GoodkIndex, ...
                                      'CTRToUse', CTRToUse, ... 
                                      'CTR', CTR, ...
                                      'ShiftedCTR', ShiftedCTR, ...
                                      'ShiftedRelativeDepths', ShiftedRelativeDepths, ...
                                      'TToUse', TToUse, ...
                                      'kToUse', kToUse, ...
                                      'PenetrationLag', PenetrationLag, ...
                                      'Slope', Slope, ...
                                      'Shift', Shift, ...
                                      'HeatFlow', HeatFlow, ...
                                      'HFErr', HFErr, ...
                                      'HFShift', HFShift, ...
                                      'HFShiftErr', HFShiftErr, ...
                                      'Averagek', Averagek, ...
                                      'kErr', kErr, ...
                                      'Gradient', Gradient, ...
                                      'GradErr', GradErr, ...
                                      'GradShift', GradShift, ...
                                      'GradShiftErr', GradShiftErr);

                                  %Define new conductivty
                                 Previousk = Currentk;
                                 if kFunction
                                     Currentk = A + B*ShiftedRelativeDepths + C*ShiftedRelativeDepths.^2 + D*exp(E*ShiftedRelativeDepths) + F*log10(ShiftedRelativeDepths);
                                 else
                                     Currentk = kInitial;
                                 end
                             end

                             % Update temperature and conductivity 
                             % -------------------------------------------------
                             TChange = abs(CurrentT-PreviousT);
                             kChange = abs(Currentk-Previousk);

                             % Next iteration
                             % -----------------------
                             Iteration = Iteration + 1;
                             TotalIterations = TotalIterations + 1;
                             IterationCounter = IterationCounter +1;
                             FirstIteration = 0;

                              TotkChange = abs(sum(kChange(find(~isnan(kChange)))));
                             if TotkChange < MinTotalkChange 
                                 disp('Convergence reached!')
                                 Converged = 1; 
                             end
                        end

                    end


                    % ==================================================
                    %% Compute HEAT FLOW if there is a heat pulse used
                    % ==================================================
                    if PulseData

                      if all(isnan(Currentk))
                        disp('Failure to determine thermal conductivity. Must reprocess or set a turn off heat pulse decay reduction')
                        return
                      end


                      %% Heat Flow Analysis 
                        % ------------------
            
                          [ ...
                          SensorsUsedForBullardFit, ...
                          GoodkIndex, ...
                          CTRToUse, ... 
                          CTR, ...
                          ShiftedCTR, ...
                          ShiftedRelativeDepths, ...
                          TToUse, ...
                          kToUse, ...
                          PenetrationLag, ...
                          Slope, ...
                          Shift, ...
                          HeatFlow, HFErr, ...
                          HFShift, HFShiftErr, ...
                          Averagek, kErr, ...
                          Gradient, GradErr, ...
                          GradShift, GradShiftErr] = HeatFlowAnalysis(NumberOfSensors, ...
                          RelativeDepths, ...
                          Currentk, ...
                          MinimumFricEqTemp, ...
                          Badk, ...
                          BadT, ...
                          SensorsToUse);

                          % Structure for outputs of heat flow analysis
                          % ---------------------------------------------
                          S_HeatFlowResults = struct(...
                              'SensorsUsedForBullardFit', ...
                              SensorsUsedForBullardFit, ...
                              'GoodkIndex', GoodkIndex, ...
                              'CTRToUse', CTRToUse, ... 
                              'CTR', CTR, ...
                              'ShiftedCTR', ShiftedCTR, ...
                              'ShiftedRelativeDepths', ...
                              ShiftedRelativeDepths, ...
                              'TToUse', TToUse, ...
                              'kToUse', kToUse, ...
                              'PenetrationLag', PenetrationLag, ...
                              'Slope', Slope, ...
                              'Shift', Shift, ...
                              'HeatFlow', HeatFlow, ...
                              'HFLRUnc', HFErr, ...
                              'HFShift', HFShift, ...
                              'HFShiftErr', HFShiftErr, ...
                              'Averagek', Averagek, ...
                              'kErr', kErr, ...
                              'Gradient', Gradient, ...
                              'GradErr', GradErr, ...
                              'GradShift', GradShift, ...
                              'GradShiftErr', GradShiftErr);

                    end

                    % ========================================
                    %% Compute HEAT FLOW REGRESSION analysis
                    % ========================================

                    %% Heat flow regression (scatter) analysis 
                    % ----------------------------------------
                    [Scatter, ...
                    ScatterHeatFlow, ...
                    Sigmaa, ...
                    Sigmab] =  HeatFlowRegression(...
                        SensorsUsedForBullardFit, ...
                        GoodkIndex, ...
                        ShiftedCTR, ...
                        MinimumFricEqTemp, ...
                        MinimumFricError);

                     % Heat flow regressions results structure
                    S_HFRegression = struct('Scatter', Scatter, ...
                        'ScatterHeatFlow', ScatterHeatFlow,...
                        'Sigmaa',Sigmaa, 'Sigmab',Sigmab);

            end

            % Save results to summary table
            % -------------------------------
            Cruise = CruiseName;
            Station = num2str(StationName);
            Pen = num2str(Penetration);
            Iter = num2str(Iteration-1);
            HP = num2str(PulsePower);
            if PulseData 
                HP = [HPStatus, ' (',HP, ' J/m)'];
            else
                HP = HPStatus;
            end
            
            BW = [num2str(round(edit_bottomwater.Value,1))];
            TrialNum = num2str(Trial);
            TotNumSens = num2str(NumberOfSensors);
            IgnoredSens = strjoin(string(IgnoredSensors));
            SensorsUsed = strjoin(string(SensorsToUse));
            SensorsTemp = setdiff(SensorsToUse, BadT);
            SensorsTemp = strjoin(string(SensorsTemp));
            SensorsNoTemp = strjoin(string(BadT));
            Sensorsk = setdiff(SensorsToUse, Badk);
            Sensorsk = strjoin(string(Sensorsk));
            SensorsNok = strjoin(string(Badk));
            TiltPen = num2str(round(mean(Tilt), 1));
            Grad = [num2str(round(Gradient,3))]; 
            Avk = [num2str(round(Averagek,1))]; 
            HF = [num2str(HeatFlow)]; 
            HFLRUnc = [num2str(round(HFErr,2))];
            CTRShift = [num2str(-HFShift,'%6.2f')]; 
            Notes = '';

            % Heat Flow Summary Table
            HFData = [Cruise, Station, Pen, TrialNum, Iter, HP, BW, ...
                TotNumSens, IgnoredSens, SensorsNoTemp, SensorsNok, ...
                TiltPen, Grad, Avk, HF, HFLRUnc,CTRShift, Notes];
            % Begin Error and Analysis Table
            ErrData = {Cruise, Station, Pen, TrialNum};
    
            Iteration = Iteration-1;

%% Print results to results (.res) file
    
            % Print out new Trial to RES file
            % ----------------------------------
            PrintStatus(ResFileId, ' ', 2)
            PrintStatus(ResFileId, '=====================', 2)
            PrintStatus(ResFileId, ['     TRIAL #', num2str(Trial)             ], 2)
            PrintStatus(ResFileId, '=====================', 3)
    
            % Print out sensor info to RES file
            % ----------------------------------
            PrintStatus(ResFileId, 'Sensors used:', 1)
            PrintStatus(ResFileId, '-------------------', 2)
            PrintStatus(ResFileId, ['Sensors included in processing:  ', SensorsUsed], 1)
            PrintStatus(ResFileId, ['Sensors with equilibrium temperature determinations included in heat flow determinations:  ', SensorsTemp], 1)
            PrintStatus(ResFileId, ['Sensors with thermal conductivity determinations included in heat flow determinations:  ', Sensorsk], 1)
    
            % Print out new PAR file 
            % ----------------------
            PrintNewPar(PulsePower, PenFileName, S_ParFile, ...
                CurrentPath, AppOutputs, isBatchMode, par_file);   
    
            % Print final input parameters to RES file
            % -------------------------------------------------
            PrintParametersResults(...
			NumberOfColumns, ...
			NumberOfSensors, ...
            TimeScalingFactor, ...
            SensorRadius, ...
            SensorDistance, ...
            CalibrationCoeffs, ...
            HyndmanCoeffs, ...
            FrictionalDelays, ...
            FricMaxStep, ...
            TimeInc, ...
            FricTauMin, ...
            FricTauMax, ...
            PulseDelays, ...
            kInit, ...
            ktype, ...
            PulsePower, ...
            TimeShiftInc, ...
            PulseMaxStep, ...
            kTolerance, ...
            PulseTauMin, ...
            PulseTauMax, ...
            HeatPulseLength, ...
            MinTotalkChange, ...
            MaxNumberOfIterations, ...
            MaxSAIterations, ...
            Sigmak0, ...
            kMin, ...
            kMax, ...
            MinThickness, ...
            kAnisotropy, ...
            TopSensorDepth, ...
            ResFileId)

            % Print frictional decay reduction results to RES file
            % ------------------------------------------------------
            PrintFricResults(...
            FricTime, ...
            NumberOfFricUsedPoints, ...
            MinimumFricEqTemp, ...
            MinimumFricError, ...
            SensorDistance, ...
            MinimumFricDelays, ...
            MinimumFricSlope, ...
            TChange, ...
            ResFileId, ...
            NumberOfColumns, ...
            Iteration, ...
            Trial, ...
            PulseData, ...
            SensorsToUse)

            % Print heat pulse decay reduction results to RES file
            % -----------------------------------------------------
            if PulseData
            PrintHeatPulseResults(PulseTime, ...
                NumberOfUsedPoints, ...
                MeankPointAtMinkDiff, ...
                kError, ...
                TempAtInf, ...
                MinimumPulseDelays, ...
                kSlopeAtMinkDiff, ...
                MeankPointAtZeroInfTemp, ...
                MeankPointAtMinRMS, ...
                kSlopeAtMinRMS, ...
                kSlopeAtZeroInfTemp, ...
                Iteration, ...
                ResFileId, ...
                SensorsToUse, ...
                Trial)
            end

            % Print heat flow reduction results to RES file
            % ----------------------------------------------
            PrintBullardResults(ResFileId, ...
            Iteration, ...
            Trial, ...
            PulseData, ...
            TChange, ...
            SensorsToUse, ...
            ShiftedRelativeDepths, ...
            MinimumFricEqTemp, ...
            BottomWaterTemp, ...
            MinimumFricError, ...
            Currentk, ...
            HeatFlow, ...
            HFErr, ...
            HFShift, ...
            HFShiftErr, ...
            Gradient, ...
            GradErr, ...
            Converged,...
            TotkChange, ...
            kChange)

%% Save results

            if PulseData==0
                S_HPResults=[];
            end
       
            S_Results = struct('Parameters', S_ParFile, 'PenetrationInfo', ...
                S_MATFile,'HeatFlowResults', S_HeatFlowResults, ...
                'FrictionalDecayResults', S_FricResults, 'HeatPulseDecayResults', S_HPResults, 'HeatFlowRegressionResults', S_HFRegression);
            ResultsStruct=S_Results;
        
% Alert user that .res output file is created
            % --------------------------------------------------------       
            disp(['Output files created for penetration: ' ...
               '' newline newline ...
               ResFileName newline ...
               par_file])   
        end
 
end